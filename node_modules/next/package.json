{
  "_args": [
    [
      {
        "raw": "next",
        "scope": null,
        "escapedName": "next",
        "name": "next",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/mhusnim/Documents/Task Project/belajar/compare-nextJS-and-antdesign"
    ]
  ],
  "_from": "next@latest",
  "_id": "next@2.3.1",
  "_inCache": true,
  "_location": "/next",
  "_nodeVersion": "7.7.4",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/next-2.3.1.tgz_1493929120747_0.38277703803032637"
  },
  "_npmUser": {
    "name": "rauchg",
    "email": "rauchg@gmail.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {
    "fbjs": "0.8.12"
  },
  "_requested": {
    "raw": "next",
    "scope": null,
    "escapedName": "next",
    "name": "next",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/next/-/next-2.3.1.tgz",
  "_shasum": "12090e4d37222b1fc80ef09389ce884ffdd7e927",
  "_shrinkwrap": null,
  "_spec": "next",
  "_where": "/Users/mhusnim/Documents/Task Project/belajar/compare-nextJS-and-antdesign",
  "bin": {
    "next": "./dist/bin/next"
  },
  "bugs": {
    "url": "https://github.com/zeit/next.js/issues"
  },
  "dependencies": {
    "ansi-html": "0.0.7",
    "babel-core": "6.24.0",
    "babel-generator": "6.24.1",
    "babel-loader": "7.0.0",
    "babel-plugin-module-resolver": "2.6.2",
    "babel-plugin-react-require": "3.0.0",
    "babel-plugin-transform-class-properties": "6.24.1",
    "babel-plugin-transform-es2015-modules-commonjs": "6.24.1",
    "babel-plugin-transform-object-rest-spread": "6.22.0",
    "babel-plugin-transform-react-jsx-source": "6.22.0",
    "babel-plugin-transform-react-remove-prop-types": "0.4.4",
    "babel-plugin-transform-runtime": "6.22.0",
    "babel-preset-env": "1.3.3",
    "babel-preset-react": "6.24.1",
    "babel-runtime": "6.23.0",
    "case-sensitive-paths-webpack-plugin": "2.0.0",
    "cross-spawn": "5.1.0",
    "del": "2.2.2",
    "etag": "1.8.0",
    "fresh": "0.5.0",
    "friendly-errors-webpack-plugin": "1.5.0",
    "glob": "7.1.1",
    "glob-promise": "3.1.0",
    "htmlescape": "1.1.1",
    "http-status": "1.0.1",
    "is-windows-bash": "1.0.3",
    "json-loader": "0.5.4",
    "loader-utils": "1.1.0",
    "md5-file": "3.1.1",
    "minimist": "1.2.0",
    "mitt": "1.1.1",
    "mkdirp-then": "1.2.0",
    "mv": "2.1.1",
    "mz": "2.6.0",
    "path-match": "1.2.4",
    "pkg-up": "2.0.0",
    "prop-types": "15.5.7",
    "react-hot-loader": "3.0.0-beta.6",
    "send": "0.15.2",
    "source-map-support": "0.4.15",
    "strip-ansi": "3.0.1",
    "styled-jsx": "0.5.7",
    "touch": "1.0.0",
    "unfetch": "2.1.2",
    "url": "0.11.0",
    "uuid": "3.0.1",
    "webpack": "2.4.0",
    "webpack-dev-middleware": "1.10.2",
    "webpack-hot-middleware": "2.18.0",
    "write-file-webpack-plugin": "4.0.2"
  },
  "description": "Minimalistic framework for server-rendered React applications",
  "devDependencies": {
    "babel-eslint": "7.2.3",
    "babel-jest": "18.0.0",
    "babel-plugin-istanbul": "4.1.3",
    "babel-plugin-transform-remove-strict-mode": "0.0.2",
    "babel-preset-es2015": "6.24.1",
    "benchmark": "2.1.4",
    "cheerio": "0.22.0",
    "chromedriver": "2.29.0",
    "coveralls": "2.13.1",
    "cross-env": "4.0.0",
    "fly": "2.0.6",
    "fly-babel": "2.1.1",
    "fly-clear": "1.0.1",
    "fly-esnext": "2.0.1",
    "fly-watch": "1.1.1",
    "husky": "0.13.3",
    "jest-cli": "19.0.1",
    "lint-staged": "^3.4.0",
    "node-fetch": "1.6.3",
    "node-notifier": "5.1.2",
    "nyc": "10.3.0",
    "react": "15.5.3",
    "react-dom": "15.5.3",
    "standard": "9.0.2",
    "wd": "1.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "12090e4d37222b1fc80ef09389ce884ffdd7e927",
    "tarball": "https://registry.npmjs.org/next/-/next-2.3.1.tgz"
  },
  "files": [
    "dist",
    "babel.js",
    "link.js",
    "css.js",
    "head.js",
    "document.js",
    "prefetch.js",
    "router.js",
    "error.js"
  ],
  "gitHead": "f4e6c51985466e7690c238fcc23c9894404bd362",
  "homepage": "https://github.com/zeit/next.js#readme",
  "jest": {
    "testEnvironment": "node",
    "roots": [
      "test/"
    ]
  },
  "license": "MIT",
  "lint-staged": {
    "*.js": "standard",
    "bin/*": "standard"
  },
  "main": "./dist/server/next.js",
  "maintainers": [
    {
      "name": "leo",
      "email": "leo@zeit.co"
    },
    {
      "name": "medikoo",
      "email": "medikoo+npm@medikoo.com"
    },
    {
      "name": "nkzawa",
      "email": "naoyuki.kanezawa@gmail.com"
    },
    {
      "name": "rauchg",
      "email": "rauchg@gmail.com"
    }
  ],
  "name": "next",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^15.4.2",
    "react-dom": "^15.4.2"
  },
  "readme": "<img width=\"112\" alt=\"screen shot 2016-10-25 at 2 37 27 pm\" src=\"https://cloud.githubusercontent.com/assets/13041/19686250/971bf7f8-9ac0-11e6-975c-188defd82df1.png\">\n\n[![Build Status](https://travis-ci.org/zeit/next.js.svg?branch=master)](https://travis-ci.org/zeit/next.js)\n[![Coverage Status](https://coveralls.io/repos/zeit/next.js/badge.svg?branch=master)](https://coveralls.io/r/zeit/next.js?branch=master)\n[![Slack Channel](https://zeit-slackin.now.sh/badge.svg)](https://zeit.chat)\n\nNext.js is a minimalistic framework for server-rendered React applications.\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n<!-- https://github.com/thlorenz/doctoc -->\n\n- [How to use](#how-to-use)\n  - [Getting Started](#getting-started)\n  - [Setup](#setup)\n  - [Automatic code splitting](#automatic-code-splitting)\n  - [CSS](#css)\n    - [Built-in CSS support](#built-in-css-support)\n    - [CSS-in-JS](#css-in-js)\n  - [Static file serving (e.g.: images)](#static-file-serving-eg-images)\n  - [Populating `<head>`](#populating-head)\n  - [Fetching data and component lifecycle](#fetching-data-and-component-lifecycle)\n  - [Routing](#routing)\n    - [With `<Link>`](#with-link)\n    - [Imperatively](#imperatively)\n      - [Router Events](#router-events)\n      - [Shallow Routing](#shallow-routing)\n  - [Prefetching Pages](#prefetching-pages)\n    - [With `<Link>`](#with-link-1)\n    - [Imperatively](#imperatively-1)\n  - [Custom server and routing](#custom-server-and-routing)\n  - [Custom `<Document>`](#custom-document)\n  - [Custom error handling](#custom-error-handling)\n  - [Custom configuration](#custom-configuration)\n  - [Customizing webpack config](#customizing-webpack-config)\n  - [Customizing babel config](#customizing-babel-config)\n  - [CDN support with Asset Prefix](#cdn-support-with-asset-prefix)\n- [Production deployment](#production-deployment)\n- [FAQ](#faq)\n- [Contributing](#contributing)\n- [Authors](#authors)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## How to use\n\n### Getting Started\n\nA step by step interactive guide of next features is available at [learnnextjs.com](https://learnnextjs.com/)\n\n### Setup\n\nInstall it:\n\n```bash\nnpm install next react react-dom --save\n```\n\nand add a script to your package.json like this:\n\n```json\n{\n  \"scripts\": {\n    \"dev\": \"next\",\n    \"build\": \"next build\",\n    \"start\": \"next start\"\n  }\n}\n```\n\nAfter that, the file-system is the main API. Every `.js` file becomes a route that gets automatically processed and rendered.\n\nPopulate `./pages/index.js` inside your project:\n\n```jsx\nexport default () => (\n  <div>Welcome to next.js!</div>\n)\n```\n\nand then just run `npm run dev` and go to `http://localhost:3000`. To use another port, you can run `npm run dev -- -p <your port here>`.\n\nSo far, we get:\n\n- Automatic transpilation and bundling (with webpack and babel)\n- Hot code reloading\n- Server rendering and indexing of `./pages`\n- Static file serving. `./static/` is mapped to `/static/`\n\nTo see how simple this is, check out the [sample app - nextgram](https://github.com/zeit/nextgram)\n\n### Automatic code splitting\n\nEvery `import` you declare gets bundled and served with each page. That means pages never load unnecessary code!\n\n```jsx\nimport cowsay from 'cowsay-browser'\nexport default () => (\n  <pre>{ cowsay.say({ text: 'hi there!' }) }</pre>\n)\n```\n\n### CSS\n\n#### Built-in CSS support\n\n<p><details>\n  <summary><b>Examples</b></summary>\n  <ul><li><a href=\"./examples/basic-css\">Basic css</a></li></ul>\n</details></p>\n\nWe bundle [styled-jsx](https://github.com/zeit/styled-jsx) to provide support for isolated scoped CSS. The aim is to support \"shadow CSS\" resembling of Web Components, which unfortunately [do not support server-rendering and are JS-only](https://github.com/w3c/webcomponents/issues/71).\n\n```jsx\nexport default () => (\n  <div>\n    Hello world\n    <p>scoped!</p>\n    <style jsx>{`\n      p {\n        color: blue;\n      }\n      div {\n        background: red;\n      }\n      @media (max-width: 600px) {\n        div {\n          background: blue;\n        }\n      }\n    `}</style>\n  </div>\n)\n```\n\n#### CSS-in-JS\n\n<p><details>\n  <summary>\n    <b>Examples</b>\n    </summary>\n  <ul><li><a href=\"./examples/with-styled-components\">Styled components</a></li><li><a href=\"./examples/with-styletron\">Styletron</a></li><li><a href=\"./examples/with-glamor\">Glamor</a></li><li><a href=\"./examples/with-cxs\">Cxs</a></li><li><a href=\"./examples/with-aphrodite\">Aphrodite</a></li><li><a href=\"./examples/with-fela\">Fela</a></li></ul>\n</details></p>\n\nIt's possible to use any existing CSS-in-JS solution. The simplest one is inline styles:\n\n```jsx\nexport default () => (\n  <p style={{ color: 'red' }}>hi there</p>\n)\n```\n\nTo use more sophisticated CSS-in-JS solutions, you typically have to implement style flushing for server-side rendering. We enable this by allowing you to define your own [custom `<Document>`](#user-content-custom-document) component that wraps each page\n\n### Static file serving (e.g.: images)\n\nCreate a folder called `static` in your project root directory. From your code you can then reference those files with `/static/` URLs:\n\n```jsx\nexport default () => (\n  <img src=\"/static/my-image.png\" />\n)\n```\n\n### Populating `<head>`\n\n<p><details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"./examples/head-elements\">Head elements</a></li>\n    <li><a href=\"./examples/layout-component\">Layout component</a></li>\n  </ul>\n</details></p>\n\nWe expose a built-in component for appending elements to the `<head>` of the page.\n\n```jsx\nimport Head from 'next/head'\nexport default () => (\n  <div>\n    <Head>\n      <title>My page title</title>\n      <meta name=\"viewport\" content=\"initial-scale=1.0, width=device-width\" />\n    </Head>\n    <p>Hello world!</p>\n  </div>\n)\n```\n\n_Note: The contents of `<head>` get cleared upon unmounting the component, so make sure each page completely defines what it needs in `<head>`, without making assumptions about what other pages added_\n\n### Fetching data and component lifecycle\n\n<p><details>\n  <summary><b>Examples</b></summary>\n  <ul><li><a href=\"./examples/data-fetch\">Data fetch</a></li></ul>\n</details></p>\n\nWhen you need state, lifecycle hooks or **initial data population** you can export a `React.Component` (instead of a stateless function, like shown above):\n\n```jsx\nimport React from 'react'\nexport default class extends React.Component {\n  static async getInitialProps ({ req }) {\n    return req\n      ? { userAgent: req.headers['user-agent'] }\n      : { userAgent: navigator.userAgent }\n  }\n  render () {\n    return <div>\n      Hello World {this.props.userAgent}\n    </div>\n  }\n}\n```\n\nNotice that to load data when the page loads, we use `getInitialProps` which is an [`async`](https://zeit.co/blog/async-and-await) static method. It can asynchronously fetch anything that resolves to a JavaScript plain `Object`, which populates `props`.\n\nFor the initial page load, `getInitialProps` will execute on the server only. `getInitialProps` will only be executed on the client when navigating to a different route via the `Link` component or using the routing APIs.\n\n_Note: `getInitialProps` can **not** be used in children components. Only in `pages`._\n\nYou can also define the `getInitialProps` lifecycle method for stateless components:\n\n```jsx\nconst Page = ({ stars }) => <div>Next stars: {stars}</div>\n\nPage.getInitialProps = async ({ req }) => {\n  const res = await fetch('https://api.github.com/repos/zeit/next.js')\n  const json = await res.json()\n  return { stars: json.stargazers_count }\n}\n\nexport default Page\n```\n\n`getInitialProps` receives a context object with the following properties:\n\n- `pathname` - path section of URL\n- `query` - query string section of URL parsed as an object\n- `asPath` - the actual url path\n- `req` - HTTP request object (server only)\n- `res` - HTTP response object (server only)\n- `jsonPageRes` - [Fetch Response](https://developer.mozilla.org/en-US/docs/Web/API/Response) object (client only)\n- `err` - Error object if any error is encountered during the rendering\n\n### Routing\n\n#### With `<Link>`\n\n<p><details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"./examples/hello-world\">Hello World</a></li>\n  </ul>\n</details></p>\n\nClient-side transitions between routes can be enabled via a `<Link>` component. Consider these two pages:\n\n```jsx\n// pages/index.js\nimport Link from 'next/link'\nexport default () => (\n  <div>Click <Link href=\"/about\"><a>here</a></Link> to read more</div>\n)\n```\n\n```jsx\n// pages/about.js\nexport default () => (\n  <p>Welcome to About!</p>\n)\n```\n\n__Note: use [`<Link prefetch>`](#prefetching-pages) for maximum performance, to link and prefetch in the background at the same time__\n\nClient-side routing behaves exactly like the browser:\n\n1. The component is fetched\n2. If it defines `getInitialProps`, data is fetched. If an error occurs, `_error.js` is rendered\n3. After 1 and 2 complete, `pushState` is performed and the new component rendered\n\nEach top-level component receives a `url` property with the following API:\n\n- `pathname` - `String` of the current path excluding the query string\n- `query` - `Object` with the parsed query string. Defaults to `{}`\n- `asPath` - `String` of the actual path (including the query) shows in the browser\n- `push(url, as=url)` - performs a `pushState` call with the given url\n- `replace(url, as=url)` - performs a `replaceState` call with the given url\n\nThe second `as` parameter for `push` and `replace` is an optional _decoration_ of the URL. Useful if you configured custom routes on the server.\n\n##### With URL object\n\n<p><details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"./examples/with-url-object-routing\">With URL Object Routing</a></li>\n  </ul>\n</details></p>\n\nThe component `<Link>` can also receive an URL object and it will automatically format it to create the URL string.\n\n```jsx\n// pages/index.js\nimport Link from 'next/link'\nexport default () => (\n  <div>Click <Link href={{ pathname: 'about', query: { name: 'Zeit' }}}><a>here</a></Link> to read more</div>\n)\n```\n\nThat will generate the URL string `/about?name=Zeit`, you can use every property as defined in the [Node.js URL module documentation](https://nodejs.org/api/url.html#url_url_strings_and_url_objects).\n\nThe default behaviour for the `<Link>` component is to `push` a new url into the stack. You can use the `replace` prop to prevent adding a new entry.\n\n```jsx\n// pages/index.js\nimport Link from 'next/link'\nexport default () => (\n  <div>Click <Link href='/about' replace><a>here</a></Link> to read more</div>\n)\n```\n\n#### Imperatively\n\n<p><details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"./examples/using-router\">Basic routing</a></li>\n    <li><a href=\"./examples/with-loading\">With a page loading indicator</a></li>\n  </ul>\n</details></p>\n\nYou can also do client-side page transitions using the `next/router`\n\n```jsx\nimport Router from 'next/router'\n\nexport default () => (\n  <div>Click <span onClick={() => Router.push('/about')}>here</span> to read more</div>\n)\n```\n\nAbove `Router` object comes with the following API:\n\n- `route` - `String` of the current route\n- `pathname` - `String` of the current path excluding the query string\n- `query` - `Object` with the parsed query string. Defaults to `{}`\n- `push(url, as=url)` - performs a `pushState` call with the given url\n- `replace(url, as=url)` - performs a `replaceState` call with the given url\n\nThe second `as` parameter for `push` and `replace` is an optional _decoration_ of the URL. Useful if you configured custom routes on the server.\n\n_Note: in order to programmatically change the route without triggering navigation and component-fetching, use `props.url.push` and `props.url.replace` within a component_\n\n##### With URL object\nYou can use an URL object the same way you use it in a `<Link>` component to `push` and `replace` an url.\n\n```jsx\nimport Router from 'next/router'\n\nconst handler = () => Router.push({\n  pathname: 'about',\n  query: { name: 'Zeit' }\n})\n\nexport default () => (\n  <div>Click <span onClick={handler}>here</span> to read more</div>\n)\n```\n\nThis uses of the same exact parameters as in the `<Link>` component.\n\n##### Router Events\n\nYou can also listen to different events happening inside the Router.\nHere's a list of supported events:\n\n- `routeChangeStart(url)` - Fires when a route starts to change\n- `routeChangeComplete(url)` - Fires when a route changed completely\n- `routeChangeError(err, url)` - Fires when there's an error when changing routes\n- `beforeHistoryChange(url)` - Fires just before changing the browser's history\n- `appUpdated(nextRoute)` - Fires when switching pages and there's a new version of the app\n\n> Here `url` is the URL shown in the browser. If you call `Router.push(url, as)` (or similar), then the value of `url` will be `as`.\n\nHere's how to properly listen to the router event `routeChangeStart`:\n\n```js\nRouter.onRouteChangeStart = (url) => {\n  console.log('App is changing to: ', url)\n}\n```\n\nIf you are no longer want to listen to that event, you can simply unset the event listener like this:\n\n```js\nRouter.onRouteChangeStart = null\n```\n\nIf a route load is cancelled (for example by clicking two links rapidly in succession), `routeChangeError` will fire. The passed `err` will contained a `cancelled` property set to `true`.\n\n```js\nRouter.onRouteChangeError = (err, url) => {\n  if (err.cancelled) {\n    console.log(`Route to ${url} was cancelled!`)\n  }\n}\n```\n\nIf you change a route while in between a new deployment, we can't navigate the app via client side. We need to do a full browser navigation. We do it automatically for you.\n\nBut you can customize that via `Route.onAppUpdated` event like this:\n\n```js\nRouter.onAppUpdated = (nextUrl) => {\n  // persist the local state\n  location.href = nextUrl\n}\n```\n\n##### Shallow Routing\n\n<p><details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"./examples/with-shallow-routing\">Shallow Routing</a></li>\n  </ul>\n</details></p>\n\nShallow routing allows you to change the URL without running `getInitialProps`. You'll receive the updated `pathname` and the `query` via the `url` prop of the same page that's loaded, without losing state.\n\nYou can do this by invoking either `Router.push` or `Router.replace` with the `shallow: true` option. Here's an example:\n\n```jsx\n// Current URL is \"/\"\nconst href = '/?counter=10'\nconst as = href\nRouter.push(href, as, { shallow: true })\n```\n\nNow, the URL is updated to `/?counter=10`. You can see the updated URL with `this.props.url` inside the `Component`.\n\nYou can watch for URL changes via [`componentWillReceiveProps`](https://facebook.github.io/react/docs/react-component.html#componentwillreceiveprops) hook as shown below:\n\n```jsx\ncomponentWillReceiveProps(nextProps) {\n  const { pathname, query } = nextProps.url\n  // fetch data based on the new query\n}\n```\n\n> NOTES:\n>\n> Shallow routing works **only** for same page URL changes. For an example, let's assume we've another page called `about`, and you run this:\n> ```js\n> Router.push('/about?counter=10', '/about?counter=10', { shallow: true })\n> ```\n> Since that's a new page, it'll unload the current page, load the new one and call `getInitialProps` even though we asked to do shallow routing.\n\n### Prefetching Pages\n\n(This is a production only feature)\n\n<p><details>\n  <summary><b>Examples</b></summary>\n  <ul><li><a href=\"./examples/with-prefetching\">Prefetching</a></li></ul>\n</details></p>\n\nNext.js has an API which allows you to prefetch pages.\n\nSince Next.js server-renders your pages, this allows all the future interaction paths of your app to be instant. Effectively Next.js gives you the great initial download performance of a _website_, with the ahead-of-time download capabilities of an _app_. [Read more](https://zeit.co/blog/next#anticipation-is-the-key-to-performance).\n\n> With prefetching Next.js only download JS code. When the page is getting rendered, you may need to wait for the data.\n\n#### With `<Link>`\n\nYou can add `prefetch` prop to any `<Link>` and Next.js will prefetch those pages in the background.\n\n```jsx\nimport Link from 'next/link'\n\n// example header component\nexport default () => (\n  <nav>\n    <ul>\n      <li><Link prefetch href='/'><a>Home</a></Link></li>\n      <li><Link prefetch href='/about'><a>About</a></Link></li>\n      <li><Link prefetch href='/contact'><a>Contact</a></Link></li>\n    </ul>\n  </nav>\n)\n```\n\n#### Imperatively\n\nMost prefetching needs are addressed by `<Link />`, but we also expose an imperative API for advanced usage:\n\n```jsx\nimport Router from 'next/router'\nexport default ({ url }) => (\n  <div>\n    <a onClick={ () => setTimeout(() => url.pushTo('/dynamic'), 100) }>\n      A route transition will happen after 100ms\n    </a>\n    {\n      // but we can prefetch it!\n      Router.prefetch('/dynamic')\n    }\n  </div>\n)\n```\n\n### Custom server and routing\n\n<p><details>\n  <summary><b>Examples</b></summary>\n  <ul>\n    <li><a href=\"./examples/custom-server\">Basic custom server</a></li>\n    <li><a href=\"./examples/custom-server-express\">Express integration</a></li>\n    <li><a href=\"./examples/custom-server-hapi\">Hapi integration</a></li>\n    <li><a href=\"./examples/custom-server-koa\">Koa integration</a></li>\n    <li><a href=\"./examples/parameterized-routing\">Parameterized routing</a></li>\n    <li><a href=\"./examples/ssr-caching\">SSR caching</a></li>\n  </ul>\n</details></p>\n\nTypically you start your next server with `next start`. It's possible, however, to start a server 100% programmatically in order to customize routes, use route patterns, etc\n\nThis example makes `/a` resolve to `./pages/b`, and `/b` resolve to `./pages/a`:\n\n```js\nconst { createServer } = require('http')\nconst { parse } = require('url')\nconst next = require('next')\n\nconst dev = process.env.NODE_ENV !== 'production'\nconst app = next({ dev })\nconst handle = app.getRequestHandler()\n\napp.prepare().then(() => {\n  createServer((req, res) => {\n    // Be sure to pass `true` as the second argument to `url.parse`.\n    // This tells it to parse the query portion of the URL.\n    const parsedUrl = parse(req.url, true)\n    const { pathname, query } = parsedUrl\n\n    if (pathname === '/a') {\n      app.render(req, res, '/b', query)\n    } else if (pathname === '/b') {\n      app.render(req, res, '/a', query)\n    } else {\n      handle(req, res, parsedUrl)\n    }\n  })\n  .listen(3000, (err) => {\n    if (err) throw err\n    console.log('> Ready on http://localhost:3000')\n  })\n})\n```\n\nThe `next` API is as follows:\n- `next(path: string, opts: object)` - `path` is where the Next project is located\n- `next(opts: object)`\n\nSupported options:\n- `dev` (`bool`) whether to launch Next.js in dev mode - default `false`\n- `dir` (`string`) where the Next project is located - default `'.'`\n- `quiet` (`bool`) Hide error messages containing server information - default `false`\n\nThen, change your `start` script to `NODE_ENV=production node server.js`.\n\n### Custom `<Document>`\n\n<p><details>\n  <summary><b>Examples</b></summary>\n  <ul><li><a href=\"./examples/with-styled-components\">Styled components custom document</a></li></ul>\n  <ul><li><a href=\"./examples/with-amp\">Google AMP</a></li></ul>\n</details></p>\n\nPages in `Next.js` skip the definition of the surrounding document's markup. For example, you never include `<html>`, `<body>`, etc. To override that default behavior, you must create a file at `./pages/_document.js`, where you can extend the `Document` class:\n\n```jsx\n// ./pages/_document.js\nimport Document, { Head, Main, NextScript } from 'next/document'\nimport flush from 'styled-jsx/server'\n\nexport default class MyDocument extends Document {\n  static getInitialProps ({ renderPage }) {\n    const {html, head} = renderPage()\n    const styles = flush()\n    return { html, head, styles }\n  }\n\n  render () {\n    return (\n     <html>\n       <Head>\n         <style>{`body { margin: 0 } /* custom! */`}</style>\n       </Head>\n       <body className=\"custom_class\">\n         {this.props.customValue}\n         <Main />\n         <NextScript />\n       </body>\n     </html>\n    )\n  }\n}\n```\n\nThe `ctx` object is equivalent to the one received in all [`getInitialProps`](#fetching-data-and-component-lifecycle) hooks, with one addition:\n\n- `renderPage` (`Function`) a callback that executes the actual React rendering logic (synchronously). It's useful to decorate this function in order to support server-rendering wrappers like Aphrodite's [`renderStatic`](https://github.com/Khan/aphrodite#server-side-rendering)\n\n### Custom error handling\n\n404 or 500 errors are handled both client and server side by a default component `error.js`. If you wish to override it, define a `_error.js`:\n\n```jsx\nimport React from 'react'\nexport default class Error extends React.Component {\n  static getInitialProps ({ res, jsonPageRes }) {\n    const statusCode = res ? res.statusCode : (jsonPageRes ? jsonPageRes.status : null)\n    return { statusCode }\n  }\n\n  render () {\n    return (\n      <p>{\n        this.props.statusCode\n        ? `An error ${this.props.statusCode} occurred on server`\n        : 'An error occurred on client'\n      }</p>\n    )\n  }\n}\n```\n\n### Custom configuration\n\nFor custom advanced behavior of Next.js, you can create a `next.config.js` in the root of your project directory (next to `pages/` and `package.json`).\n\nNote: `next.config.js` is a regular Node.js module, not a JSON file. It gets used by the Next server and build phases, and not included in the browser build.\n\n```javascript\n// next.config.js\nmodule.exports = {\n  /* config options here */\n}\n```\n\n#### Setting a custom build directory\n\nYou can specify a name to use for a custom build directory. For example, the following config will create a `build` folder instead of a `.next` folder. If no configuration is specified then next will create a `.next` folder.\n\n```javascript\n// next.config.js\nmodule.exports = {\n  distDir: 'build'\n}\n```\n\n### Customizing webpack config\n\nIn order to extend our usage of `webpack`, you can define a function that extends its config via `next.config.js`.\n\n```js\n// This file is not going through babel transformation.\n// So, we write it in vanilla JS\n// (But you could use ES2015 features supported by your Node.js version)\n\nmodule.exports = {\n  webpack: (config, { dev }) => {\n    // Perform customizations to config\n    \n    // Important: return the modified config\n    return config\n  }\n}\n```\n\n*Warning: Adding loaders to support new file types (css, less, svg, etc.) is __not__ recommended because only the client code gets bundled via webpack and thus it won't work on the initial server rendering. Babel plugins are a good alternative because they're applied consistently between server/client rendering (e.g. [babel-plugin-inline-react-svg](https://github.com/kesne/babel-plugin-inline-react-svg)).*\n\n### Customizing babel config\n\n<p><details>\n  <summary><b>Examples</b></summary>\n  <ul><li><a href=\"./examples/with-custom-babel-config\">Custom babel configuration</a></li></ul>\n</details></p>\n\nIn order to extend our usage of `babel`, you can simply define a `.babelrc` file at the root of your app. This file is optional.\n\nIf found, we're going to consider it the *source of truth*, therefore it needs to define what next needs as well, which is the `next/babel` preset.\n\nThis is designed so that you are not surprised by modifications we could make to the babel configurations.\n\nHere's an example `.babelrc` file:\n\n```js\n{\n  \"presets\": [\n    \"next/babel\",\n    \"stage-0\"\n  ],\n}\n```\n\n### CDN support with Asset Prefix\n\nTo set up a CDN, you can set up the `assetPrefix` setting and configure your CDN's origin to resolve to the domain that Next.js is hosted on.\n\n```js\nconst isProd = process.env.NODE_ENV === 'production'\nmodule.exports = {\n  // You may only need to add assetPrefix in the production.\n  assetPrefix: isProd ? 'https://cdn.mydomain.com' : ''\n}\n```\n\nNote: Next.js will automatically use that prefix the scripts it loads, but this has no effect whatsoever on `/static`. If you want to serve those assets over the CDN, you'll have to introduce the prefix yourself. One way of introducing a prefix that works inside your components and varies by environment is documented [in this example](https://github.com/zeit/next.js/tree/master/examples/with-universal-configuration).\n\n## Production deployment\n\nTo deploy, instead of running `next`, you want to build for production usage ahead of time. Therefore, building and starting are separate commands:\n\n```bash\nnext build\nnext start\n```\n\nFor example, to deploy with [`now`](https://zeit.co/now) a `package.json` like follows is recommended:\n\n```json\n{\n  \"name\": \"my-app\",\n  \"dependencies\": {\n    \"next\": \"latest\"\n  },\n  \"scripts\": {\n    \"dev\": \"next\",\n    \"build\": \"next build\",\n    \"start\": \"next start\"\n  }\n}\n```\n\nThen run `now` and enjoy!\n\nNext.js can be deployed to other hosting solutions too. Please have a look at the ['Deployment'](https://github.com/zeit/next.js/wiki/Deployment) section of the wiki.\n\nNote: we recommend putting `.next`, or your custom dist folder (Please have a look at ['Custom Config'](You can set a custom folder in config https://github.com/zeit/next.js#custom-configuration.)), in `.npmignore` or `.gitignore`. Otherwise, use `files` or `now.files` to opt-into a whitelist of files you want to deploy (and obviously exclude `.next` or your custom dist folder)\n\n## FAQ\n\n<details>\n  <summary>Is this production ready?</summary>\n  Next.js has been powering https://zeit.co since its inception.\n\n  We’re ecstatic about both the developer experience and end-user performance, so we decided to share it with the community.\n</details>\n\n<details>\n  <summary>How big is it?</summary>\n\nThe client side bundle size should be measured in a per-app basis.\nA small Next main bundle is around 65kb gzipped.\n\n</details>\n\n<details>\n  <summary>Is this like `create-react-app`?</summary>\n\nYes and No.\n\nYes in that both make your life easier.\n\nNo in that it enforces a _structure_ so that we can do more advanced things like:\n- Server side rendering\n- Automatic code splitting\n\nIn addition, Next.js provides two built-in features that are critical for every single website:\n- Routing with lazy component loading: `<Link>` (by importing `next/link`)\n- A way for components to alter `<head>`: `<Head>` (by importing `next/head`)\n\nIf you want to create re-usable React components that you can embed in your Next.js app or other React applications, using `create-react-app` is a great idea. You can later `import` it and keep your codebase clean!\n\n</details>\n\n<details>\n  <summary>How do I use CSS-in-JS solutions?</summary>\n\nNext.js bundles [styled-jsx](https://github.com/zeit/styled-jsx) supporting scoped css. However you can use a CSS-in-JS solution in your Next app by just including your favorite library [as mentioned before](#css-in-js) in the document.\n</details>\n\n<details>\n  <summary>What syntactic features are transpiled? How do I change them?</summary>\n\nWe track V8. Since V8 has wide support for ES6 and `async` and `await`, we transpile those. Since V8 doesn’t support class decorators, we don’t transpile those.\n\nSee [this](https://github.com/zeit/next.js/blob/master/server/build/webpack.js#L79) and [this](https://github.com/zeit/next.js/issues/26)\n\n</details>\n\n<details>\n  <summary>Why a new Router?</summary>\n\nNext.js is special in that:\n\n- Routes don’t need to be known ahead of time\n- Routes are always lazy-loadable\n- Top-level components can define `getInitialProps` that should _block_ the loading of the route (either when server-rendering or lazy-loading)\n\nAs a result, we were able to introduce a very simple approach to routing that consists of two pieces:\n\n- Every top level component receives a `url` object to inspect the url or perform modifications to the history\n- A `<Link />` component is used to wrap elements like anchors (`<a/>`) to perform client-side transitions\n\nWe tested the flexibility of the routing with some interesting scenarios. For an example, check out [nextgram](https://github.com/zeit/nextgram).\n\n</details>\n\n<details>\n<summary>How do I define a custom fancy route?</summary>\n\nWe [added](#custom-server-and-routing) the ability to map between an arbitrary URL and any component by supplying a request handler.\n\nOn the client side, we have a parameter call `as` on `<Link>` that _decorates_ the URL differently from the URL it _fetches_.\n</details>\n\n<details>\n<summary>How do I fetch data?</summary>\n\nIt’s up to you. `getInitialProps` is an `async` function (or a regular function that returns a `Promise`). It can retrieve data from anywhere.\n</details>\n\n<details>\n  <summary>Can I use it with GraphQL?</summary>\n\nYes! Here's an example with [Apollo](./examples/with-apollo).\n\n</details>\n\n<details>\n<summary>Can I use it with Redux?</summary>\n\nYes! Here's an [example](./examples/with-redux)\n</details>\n\n<details>\n<summary>What is this inspired by?</summary>\n\nMany of the goals we set out to accomplish were the ones listed in [The 7 principles of Rich Web Applications](http://rauchg.com/2014/7-principles-of-rich-web-applications/) by Guillermo Rauch.\n\nThe ease-of-use of PHP is a great inspiration. We feel Next.js is a suitable replacement for many scenarios where you otherwise would use PHP to output HTML.\n\nUnlike PHP, we benefit from the ES6 module system and every file exports a **component or function** that can be easily imported for lazy evaluation or testing.\n\nAs we were researching options for server-rendering React that didn’t involve a large number of steps, we came across [react-page](https://github.com/facebookarchive/react-page) (now deprecated), a similar approach to Next.js by the creator of React Jordan Walke.\n\n</details>\n\n## Contributing\n\nPlease see our [contributing.md](./contributing.md)\n\n## Authors\n\n- Naoyuki Kanezawa ([@nkzawa](https://twitter.com/nkzawa)) – ▲ZEIT\n- Tony Kovanen ([@tonykovanen](https://twitter.com/tonykovanen)) – ▲ZEIT\n- Guillermo Rauch ([@rauchg](https://twitter.com/rauchg)) – ▲ZEIT\n- Dan Zajdband ([@impronunciable](https://twitter.com/impronunciable)) – Knight-Mozilla / Coral Project\n- Tim Neutkens ([@timneutkens](https://github.com/timneutkens))\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/zeit/next.js.git"
  },
  "scripts": {
    "build": "fly",
    "coveralls": "nyc --instrument=false --source-map=false report --temp-directory=./coverage --reporter=text-lcov | coveralls",
    "lint": "standard 'bin/*' 'client/**/*.js' 'examples/**/*.js' 'lib/**/*.js' 'pages/**/*.js' 'server/**/*.js' 'test/**/*.js'",
    "posttestonly": "fly posttest",
    "precommit": "lint-staged",
    "prepublish": "npm run release",
    "pretest": "npm run lint",
    "pretestonly": "fly pretest",
    "release": "fly release",
    "test": "npm run testonly -- --coverage --forceExit --runInBand --verbose --bail",
    "testonly": "cross-env NODE_PATH=test/lib jest \\.test.js"
  },
  "standard": {
    "parser": "babel-eslint",
    "ignore": [
      "**/node_modules/**"
    ]
  },
  "version": "2.3.1"
}
