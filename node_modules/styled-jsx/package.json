{
  "_args": [
    [
      {
        "raw": "styled-jsx@0.5.7",
        "scope": null,
        "escapedName": "styled-jsx",
        "name": "styled-jsx",
        "rawSpec": "0.5.7",
        "spec": "0.5.7",
        "type": "version"
      },
      "/Users/mhusnim/Documents/Task Project/belajar/compare-nextJS-and-antdesign/node_modules/next"
    ]
  ],
  "_from": "styled-jsx@0.5.7",
  "_id": "styled-jsx@0.5.7",
  "_inCache": true,
  "_location": "/styled-jsx",
  "_nodeVersion": "6.9.5",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/styled-jsx-0.5.7.tgz_1487409591217_0.9937257163692266"
  },
  "_npmUser": {
    "name": "leo",
    "email": "leo@zeit.co"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {
    "babel-code-frame": "6.22.0",
    "babel-messages": "6.23.0",
    "babel-runtime": "6.23.0",
    "babel-types": "6.24.1",
    "debug": "2.6.6",
    "globals": "9.17.0",
    "invariant": "2.2.2",
    "lodash": "4.17.4"
  },
  "_requested": {
    "raw": "styled-jsx@0.5.7",
    "scope": null,
    "escapedName": "styled-jsx",
    "name": "styled-jsx",
    "rawSpec": "0.5.7",
    "spec": "0.5.7",
    "type": "version"
  },
  "_requiredBy": [
    "/next"
  ],
  "_resolved": "https://registry.npmjs.org/styled-jsx/-/styled-jsx-0.5.7.tgz",
  "_shasum": "2cb02263ffa719b1435a864fdd6c62802ae86669",
  "_shrinkwrap": null,
  "_spec": "styled-jsx@0.5.7",
  "_where": "/Users/mhusnim/Documents/Task Project/belajar/compare-nextJS-and-antdesign/node_modules/next",
  "ava": {
    "require": [
      "babel-register",
      "babel-polyfill"
    ]
  },
  "babel": {
    "presets": [
      "es2015",
      "stage-3",
      "react"
    ]
  },
  "bugs": {
    "url": "https://github.com/zeit/styled-jsx/issues"
  },
  "dependencies": {
    "babel-plugin-syntax-jsx": "6.18.0",
    "babel-traverse": "6.21.0",
    "babylon": "6.14.1",
    "convert-source-map": "1.3.0",
    "escape-string-regexp": "1.0.5",
    "object.entries": "1.0.4",
    "source-map": "0.5.6",
    "string-hash": "1.1.1"
  },
  "description": "Full CSS support for JSX without compromises",
  "devDependencies": {
    "ava": "0.17.0",
    "babel-cli": "6.18.0",
    "babel-core": "6.18.2",
    "babel-plugin-transform-runtime": "6.15.0",
    "babel-polyfill": "6.16.0",
    "babel-preset-babili": "0.0.10",
    "babel-preset-es2015": "6.16.0",
    "babel-preset-react": "6.16.0",
    "babel-preset-stage-3": "6.16.0",
    "babel-register": "6.18.0",
    "benchmark": "2.1.3",
    "gulp": "3.9.1",
    "gulp-babel": "6.1.2",
    "gulp-benchmark": "1.1.1",
    "human-size": "1.1.0",
    "mz": "2.6.0",
    "react": "15.4.1",
    "react-dom": "15.4.1",
    "xo": "0.17.1"
  },
  "directories": {},
  "dist": {
    "shasum": "2cb02263ffa719b1435a864fdd6c62802ae86669",
    "tarball": "https://registry.npmjs.org/styled-jsx/-/styled-jsx-0.5.7.tgz"
  },
  "files": [
    "dist",
    "lib",
    "server.js",
    "babel.js",
    "style.js"
  ],
  "gitHead": "df90c37c929b5b9d17c5ef62d6fb71b723c830f4",
  "homepage": "https://github.com/zeit/styled-jsx#readme",
  "license": "MIT",
  "maintainers": [
    {
      "name": "leo",
      "email": "leo@zeit.co"
    },
    {
      "name": "nkzawa",
      "email": "naoyuki.kanezawa@gmail.com"
    },
    {
      "name": "rauchg",
      "email": "rauchg@gmail.com"
    }
  ],
  "name": "styled-jsx",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^15.0"
  },
  "readme": "# styled-jsx\n\n[![Build Status](https://travis-ci.org/zeit/styled-jsx.svg?branch=master)](https://travis-ci.org/zeit/styled-jsx)\n[![XO code style](https://img.shields.io/badge/code_style-XO-5ed9c7.svg)](https://github.com/sindresorhus/xo)\n[![Slack Channel](https://zeit-slackin.now.sh/badge.svg)](https://zeit.chat)\n[![npm](https://img.shields.io/npm/v/styled-jsx.svg)](https://www.npmjs.com/package/styled-jsx)\n\nFull, scoped and component-friendly CSS support for JSX (rendered on the server or the client).\n\n## Usage\n\nFirstly, install the package:\n\n```bash\n$ npm install --save styled-jsx\n```\n\nNext, add `styled-jsx/babel` to `plugins` in your babel configuration:\n\n```json\n{\n  \"plugins\": [\n    \"styled-jsx/babel\"\n  ]\n}\n```\n\nNow add `<style jsx>` to your code and fill it with CSS:\n\n```js\nexport default () => (\n  <div>\n    <p>only this paragraph will get the style :)</p>\n    { /* you can include <Component />s here that include\n         other <p>s that don't get unexpected styles! */ }\n    <style jsx>{`\n      p {\n        color: red;\n      }\n    `}</style>\n  </div>\n)\n```\n\n## Features\n\n- Full CSS support, no tradeoffs in power\n- Runtime size of just **2kb** (gzipped, from 6kb)\n- Complete isolation: Selectors, animations, keyframes\n- Built-in CSS-prefixing\n- Very fast, minimal and efficient transpilation (see below)\n- High-performance runtime-CSS-injection when not server-rendering\n- Future-proof: Equivalent to server-renderable \"Shadow CSS\"\n- Works like the deprecated `<style scoped>`, but the styles get injected only once per component\n\n## How It Works\n\nThe example above transpiles to the following:\n\n```js\nimport _JSXStyle from 'styled-jsx/style'\n\nexport default () => (\n  <div data-jsx='cn2o3j'>\n    <p data-jsx='cn2o3j'>only this paragraph will get the style :)</p>\n    <_JSXStyle styleId='cn2o3j' css={`p[data-jsx=cn2o3j] {color: red;}`} />\n  </div>\n)\n```\n\n### Why It Works Like This\n\nData attributes give us style encapsulation and `_JSXStyle` is heavily optimized for:\n\n- Injecting styles upon render\n- Only injecting a certain component's style once (even if the component is included multiple times)\n- Removing unused styles\n- Keeping track of styles for server-side rendering (discussed in the next section)\n\n### Targeting The Root\n\nNotice that the parent `<div>` above also gets a `data-jsx` atribute. We do this so that\nyou can target the \"root\" element, in the same manner that\n[`:host`](https://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-201/#toc-style-host) works with Shadow DOM.\n\nIf you want to target _only_ the host, we suggest you use a class:\n\n```js\nexport default () => (\n  <div className=\"root\">\n    <style jsx>{`\n      .root {\n        color: green;\n      }\n    `}</style>\n  </div>\n)\n```\n\n### Global styles\n\nTo skip scoping entirely, you can make the global-ness of your styles\nexplicit by adding _global_.\n\n```js\nexport default () => (\n  <div>\n    <style jsx global>{`\n      body {\n        background: red\n      }\n    `}</style>\n  </div>\n)\n```\n\nThe advantage of using this over `<style>` is twofold: no need\nto use `dangerouslySetInnerHTML` to avoid escaping issues with CSS\nand take advantage of `styled-jsx`'s de-duping system to avoid\nthe global styles being inserted multiple times.\n\n### Global selectors\n\nSometimes it's useful to skip prefixing. We support `:global()`,\ninspired by [css-modules](https://github.com/css-modules/css-modules).\n\nThis is very useful in order to, for example, generate an *unprefixed class* that\nyou can pass to 3rd-party components. For example, to style\n`react-select` which supports passing a custom class via `optionClassName`:\n\n```js\nimport Select from 'react-select'\nexport default () => (\n  <div>\n    <Select optionClassName=\"react-select\" />\n\n    <style jsx>{`\n      /* \"div\" will be prefixed, but \".react-select\" won't */\n      div :global(.react-select) {\n        color: red\n      }\n    `}</style>\n  </div>\n)\n```\n\n### Dynamic styles\n\n#### Via `className` toggling\n\nTo make a component's visual representation customizable from the outside world, there are two options. The first one is to pass properties that toggle class names.\n\n```jsx\nconst Button = (props) => (\n  <button className={ 'large' in props && 'large' }>\n     { props.children }\n     <style jsx>{`\n        button {\n          padding: 20px;\n          background: #eee;\n          color: #999\n        }\n        .large {\n          padding: 50px\n        }\n     `}</style>\n  </button>\n)\n```\n\nThen you would use this component as either `<Button>Hi</Button>` or `<Button large>Big</Button>`.\n\n#### Via inline `style`\n\nImagine that you wanted to make the padding in the button above completely customizable. You can override the CSS you configure via inline-styles:\n\n```jsx\nconst Button = ({ padding, children }) => (\n  <button style={{ padding }}>\n     { children }\n     <style jsx>{`\n        button {\n          padding: 20px;\n          background: #eee;\n          color: #999\n        }\n     `}</style>\n  </button>\n)\n```\n\nIn this example, the padding defaults to the one set in `<style>` (`20`), but the user can pass a custom one via `<Button padding={30}>`.\n\n### Constants and Config\n\nIt is possible to use constants like so:\n\n```jsx\nimport { colors, spacing } from '../theme'\nimport { invertColor } from '../theme/utils'\n\nconst Button = ({ children }) => (\n  <button>\n     { children }\n     <style jsx>{`\n        button {\n          padding: ${ spacing.medium };\n          background: ${ colors.primary };\n          color: ${ invertColor(colors.primary) };\n        }\n     `}</style>\n  </button>\n)\n```\n\nN.B. Only constants defined outside of the component scope are allowed here.\nIf you want to use or toggle dynamic values depending on the component `state` or `props` then we recommend to use one of the techniques from the [Dynamic styles section](#dynamic-styles)\n\n## Server-Side Rendering\n\n### `styled-jsx/server`\n\nThe main export flushes your styles to an array of `React.Element`:\n\n```js\nimport React from 'react'\nimport ReactDOM from 'react-dom/server'\nimport flush from 'styled-jsx/server'\nimport App from './app'\n\nexport default (req, res) => {\n  const app = ReactDOM.renderToString(<App />)\n  const styles = flush()\n  const html = ReactDOM.renderToStaticMarkup(<html>\n    <head>{ styles }</head>\n    <body>\n      <div id=\"root\" dangerouslySetInnerHTML={{__html: app}} />\n    </body>\n  </html>)\n  res.end('<!doctype html>' + html)\n}\n```\n\nWe also expose `flushToHTML` to return generated HTML:\n\n```js\nimport React from 'react'\nimport ReactDOM from 'react-dom/server'\nimport { flushToHTML } from 'styled-jsx/server'\nimport App from './app'\n\nexport default (req, res) => {\n  const app = ReactDOM.renderToString(<App />)\n  const styles = flushToHTML()\n  const html = `<!doctype html>\n    <html>\n      <head>${styles}</head>\n      <body>\n        <div id=\"root\">${app}</div>\n      </body>\n    </html>`\n  res.end(html)\n}\n```\n\nIt's **paramount** that you use one of these two functions so that\nthe generated styles can be diffed when the client loads and\nduplicate styles are avoided.\n\n## Syntax Highlighting\n\nWhen working with template literals a common drawback is missing syntax highlighting. The following editors currently have support for highlighting CSS inside `<style jsx>` elements.\n\n _If you have a solution for an editor not on the list_ __please [open a PR](https://github.com/zeit/styled-jsx/pull/new/master)__ _and let us now._\n\n### Atom\n\nThe [`language-babel`](https://github.com/gandm/language-babel) package for the [Atom editor](https://atom.io/) has an option to [extend the grammar for JavaScript tagged template literals](https://github.com/gandm/language-babel#javascript-tagged-template-literal-grammar-extensions).\n\nAfter [installing the package](https://github.com/gandm/language-babel#installation) add the code below to the appropriate settings entry. In a few moments you should be blessed with proper CSS syntax highlighting. ([source](https://github.com/gandm/language-babel/issues/324))\n\n```\n\"(?<=<style jsx>{)|(?<=<style jsx global>{)\":source.css.styled\n```\n\n![babel-language settings entry](https://cloud.githubusercontent.com/assets/2313237/22627258/6c97cb68-ebb7-11e6-82e1-60205f8b31e7.png)\n\n## Credits\n\n- **Pedram Emrouznejad** ([rijs](https://github.com/rijs/fullstack)) suggested attribute selectors over my initial class prefixing idea.\n- **Sunil Pai** ([glamor](https://github.com/threepointone/glamor)) inspired the use of `murmurhash2` (minimal and fast hashing) and an efficient style injection logic.\n- **Sultan Tarimo** built [stylis.js](https://github.com/thysultan), a super fast and tiny CSS parser and compiler.\n- **Max Stoiber** ([styled-components](https://github.com/styled-components)) proved the value of retaining the familiarity of CSS syntax and pointed me to the very efficient [stylis](https://github.com/thysultan/stylis.js) compiler (which we forked to very efficiently append attribute selectors to the user's css)\n- **Yehuda Katz** ([ember](https://github.com/emberjs)) convinced me on Twitter to transpile CSS as an alternative to CSS-in-JS.\n- **Evan You** ([vuejs](https://github.com/vuejs)) discussed his Vue.js CSS transformation with me.\n- **Henry Zhu** ([babel](https://github.com/babel)) helpfully pointed me to some important areas of the babel plugin API.\n\n## Authors\n\n- Guillermo Rauch ([@rauchg](https://twitter.com/rauchg)) - [▲ZEIT](https://zeit.co)\n- Naoyuki Kanezawa ([@nkzawa](https://twitter.com/nkzawa)) - [▲ZEIT](https://zeit.co)\n- Giuseppe Gurgone ([@giuseppegurgone](https://twitter.com/giuseppegurgone))\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/zeit/styled-jsx.git"
  },
  "scripts": {
    "dev": "gulp",
    "prepublish": "gulp transpile",
    "start": "node server.js",
    "test": "xo && ava"
  },
  "version": "0.5.7",
  "xo": {
    "esnext": true,
    "space": true,
    "semicolon": false,
    "ignores": [
      "lib/**",
      "test/fixtures/**"
    ],
    "envs": [
      "node",
      "browser"
    ],
    "rules": {
      "eqeqeq": [
        "error",
        "always",
        {
          "null": "ignore"
        }
      ],
      "no-eq-null": 0,
      "import/no-unresolved": 0,
      "new-cap": 0
    }
  }
}
